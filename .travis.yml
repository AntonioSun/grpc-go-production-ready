# use the latest ubuntu environment (18.04) available on travis
dist: bionic

language: go

# Force-enable Go modules. Also force go to use the code in vendor/
# These will both be unnecessary when Go 1.14 lands.
env:
  global:
    - CC_TEST_REPORTER_ID=9cc8d6f658996ba4d94c148c02e551e3be69977dc930054b442cfcccc775ec3d
    - SONAR_TOKEN=09a24bce4ec02d6fada6b9726cfd9431bb3839f7
    - GO111MODULE=on
    - GOFLAGS='-mod vendor'

# You don't need to test on very old versions of the Go compiler. It's the user's
# responsibility to keep their compiler up to date.
go:
  - 1.13.x

# Only clone the most recent commit.
git:
  depth: 1

# Skip the install step. Don't `go get` dependencies. Only build with the code
# in vendor/
install: true

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script that returns a nonzero exit code will flunk the
# build and immediately stop. It's sorta like having set -e enabled in bash.
# Make sure you've pinned the version of golangci-lint by running this command
# in your project directory:
#   GO111MODULE=on go get github.com/golangci/golangci-lint@v1.21.0
# You should see this line in your go.mod file:
#   github.com/golangci/golangci-lint v1.21.0
before_script:
  - go install github.com/golangci/golangci-lint/cmd/golangci-lint
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
script:
  - golangci-lint run       # run a bunch of code checkers/linters in parallel
  - go test -short -coverprofile=cov.out `go list ./...`
  - sonar-scanner

addons:
  sonarcloud:
    organization: "apssouza22-github"
    token:
      secure: "09a24bce4ec02d6fada6b9726cfd9431bb3839f7" # encrypted value of your token